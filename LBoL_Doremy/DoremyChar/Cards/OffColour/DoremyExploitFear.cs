using LBoL.Base;
using LBoL.ConfigData;
using LBoL.Core.Battle;
using LBoL.Core.Intentions;
using LBoL.Core;
using LBoL_Doremy.DoremyChar.Keywords;
using LBoL_Doremy.DoremyChar.SE;
using LBoL_Doremy.RootTemplates;
using LBoLEntitySideloader.Attributes;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UnityEngine;
using LBoL.Core.Units;
using LBoL.Base.Extensions;
using LBoL_Doremy.DoremyChar.Actions;
using LBoL.Core.Battle.BattleActions;
using LBoL.Core.StatusEffects;

namespace LBoL_Doremy.DoremyChar.Cards.OffColour
{

    public sealed class DoremyExploitFearDef : DCardDef
    {
        public override CardConfig PreConfig()
        {
            var con = DefaultConfig();

            con.Type = LBoL.Base.CardType.Skill;
            con.TargetType = TargetType.Self;
            con.Rarity = Rarity.Uncommon;

            con.Colors = new List<ManaColor>() { ManaColor.Red };
            con.Cost = new ManaGroup() { Red = 1, Any = 1 };
            con.UpgradedCost = new ManaGroup() { Any = 2 };

            con.Value1 = 12;
            con.UpgradedValue1 = 12;


            con.Keywords = Keyword.Exile;
            con.UpgradedKeywords = Keyword.Exile;

            con.RelativeEffects = new List<string>() { nameof(DC_NightmareSE), nameof(DC_SelfNightmareTooltipSE) };
            con.UpgradedRelativeEffects = new List<string>() { nameof(DC_NightmareSE), nameof(DC_SelfNightmareTooltipSE) };
            return con;
        }
    }

    [EntityLogic(typeof(DoremyExploitFearDef))]
    public sealed class DoremyExploitFear : DCard
    {

        public int TempFpDiv => IsUpgraded ? 3 : 4;

        public int FpDiv => IsUpgraded ? 6 : 9;


        public int TempFpEst => GetEstimate(TempFpDiv);

        public int FpEst => GetEstimate(FpDiv);


        private int GetEstimate(int div)
        {
            var wouldBeConsumed = 0;
            if (RealBattle?.Player.TryGetStatusEffect<DC_NightmareSE>(out var nightmareSE) ?? false)
            {
                wouldBeConsumed = nightmareSE.Level;
            }
            return (wouldBeConsumed + (int)SelfNM.toApply) / div;
        }


        public NightmareInfo SelfNM => new NightmareInfo(Value1, true);

        protected override IEnumerable<BattleAction> Actions(UnitSelector selector, ManaGroup consumingMana, Interaction precondition)
        {
            yield return NightmareAction(Battle.Player, SelfNM);

            var consumedNM = 0;

            if (Battle.Player.TryGetStatusEffect<DC_NightmareSE>(out var nightmareSE))
            {
                consumedNM += nightmareSE.Level;
                yield return new RemoveStatusEffectAction(nightmareSE);
            }

            yield return BuffAction<TempFirepower>(consumedNM / TempFpDiv);
            yield return BuffAction<Firepower>(consumedNM / FpDiv);
        }
    }



   
}
